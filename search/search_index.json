{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#install","title":"Install","text":"<p>You can get the latest release on here or search it on the Mod Browser with its name, <code>MultiCrafter Lib</code>.</p>"},{"location":"#supports","title":"Supports","text":"Method Json JavaScript Java Note Dependency \u2714\ufe0f \u2714\ufe0f \u2714\ufe0f Players need download this mod Injection \u2714\ufe0f \u2714\ufe0f No Need Keep your mod standalone Jitpack \u274c \u274c \u2714\ufe0f Full sources code support DependencyInjectionJitpack <p>For a JSON, JavaScript or Java mod.</p> <p>If you want your mod to depend on MultiCrafter and only focus on your contents, it's for your use case.</p> <p>You should add MultiCrafter as a dependency in the <code>mod.[h]json</code> file:</p> mod.jsonmod.hjson <pre><code>\"dependencies\": [\"multi-crafter\"]\n</code></pre> <pre><code>dependencies: [\"multi-crafter\"]\n</code></pre> <p>For a JSON or JavaScript mod.</p> <p>Injection makes your mod an actual Java mod, so it must fit the structure of Java mod.</p>"},{"location":"#step-1","title":"Step 1","text":"<p>You will have to download a zip, named <code>MultiCrafter-injection.zip</code>, in here.</p>"},{"location":"#step-2","title":"Step 2","text":"<p>Unzip the downloaded zip and copy its contents into the root directory of your mod.</p> <p>  Unzip will add essential files into the root directory.  Please pay attention to your structure and avoid secondary directory in your mod zip.  Suppose your have this structure: <ul> <li> <p>Before unzip: <pre><code>your-mod/\n\u251c\u2500 content/\n|  \u251c\u2500 crafter.hjson\n\u251c\u2500 mod.hjson\n\u251c\u2500 icon.png\n</code></pre></p> </li> <li> <p>After unzip: <pre><code>your-mod/\n\u251c\u2500 multicrafter/\n\u251c\u2500 scripts/\n|  \u251c\u2500 multi-crafter/\n|  |  \u251c\u2500 lib.js\n\u251c\u2500 content/\n|  \u251c\u2500 crafter.hjson\n\u251c\u2500 mod.hjson\n\u251c\u2500 icon.png\n\u251c\u2500 classes.dex\n</code></pre></p> </li> </ul> <p>MultiCrafter injection doesn't work when you zip your mod folder in a wrong way  where have created a secondary directory.</p> <p>Suppose you had a mod zip, named <code>your-mod.zip</code>.</p> <ul> <li> <p>This will work. In your-mod.zip, there are... <pre><code>multicrafter/\nscripts/\ncontent/\nmod.hjson\nicon.png\n</code></pre></p> </li> <li> <p>But this will not. In your-mod.zip, there are... <pre><code>your-mod/\n\u251c\u2500 multicrafter/\n\u251c\u2500 scripts/\n\u251c\u2500 content/\n\u251c\u2500 mod.hjson\n\u251c\u2500 icon.png\n</code></pre></p> </li> </ul> <p>If you're using <code>ZArchiver</code> app, you could multi-select the each file inside your mod folder  and zip them all into one. </p>"},{"location":"#step-3","title":"Step 3","text":"<p>Then add this line in your <code>mod.[h]json</code>:</p> mod.jsonmod.hjson <pre><code>\"main\": \"MultiCrafterAdapter\"\n</code></pre> <pre><code>main: MultiCrafterAdapter\n</code></pre> <p>Then you can create your own multicrafter after checking this instrution.    </p> <ul> <li>Root Directory: A folder which always has <code>icon.png</code> and <code>mod.[h]json</code>.</li> </ul> <p> You may face a warning about overwriting. <p>Your device may warn you that would overwrite something. It's always safe, but you'd better to back-up your mod workspace before copy. </p>"},{"location":"#for-github","title":"For GitHub","text":"<p>If you've uploaded your mod onto GitHub, please be careful about your mod type.</p> <p>Because, a non-Java mod is always downloaded as zip with a secondary directory ingame, which doesn't work like what's mentioned above.</p> <p>you have to add this line in your <code>mod.[h]json</code>:</p> mod.jsonmod.hjson <pre><code>\"java\": \"true\"\n</code></pre> <pre><code>java: true\n</code></pre> <p>Thus, you need create a <code>release</code> with your mod file on your GitHub page manually.</p> <p>Remember to change its extension directly from <code>*.zip</code> to <code>*.jar</code>, for example:</p> <p>If your mod file is <code>my-first-json-mod.zip</code>, it should be <code>my-first-json-mod.jar</code>.</p>"},{"location":"#upgrade-multicrafter-lib","title":"Upgrade MultiCrafter Lib","text":"<p>With Injection, you have to upgrade <code>MultiCrafter Lib</code> manually.</p> <p>It's easy that you just need repeat the step above and handle with overwritten.</p> <p>For a Java mod.</p> <p>You can click here  to fetch the latest version of MultiCrafter Lib.</p> GroovyKotlin <ol> <li> <p>Add the JitPack repository to your build.gradle</p> <pre><code>repositories { maven { url 'https://jitpack.io' } }\n</code></pre> </li> <li> <p>Add the dependency</p> <pre><code> dependencies {\n    implementation 'com.github.liplum:MultiCrafterLib:&lt;version&gt;'\n}\n</code></pre> </li> </ol> <ol> <li> <p>Add the JitPack repository to your build.gradle.kts</p> <pre><code>repositories {\n    maven { url = uri(\"https://www.jitpack.io\") }\n}\n</code></pre> </li> <li> <p>Add the dependency</p> <pre><code> dependencies {\n    implementation(\"com.github.liplum:MultiCrafterLib:&lt;version&gt;\")\n}\n</code></pre> </li> </ol>"},{"location":"#more-info","title":"More Info","text":"<p>You can access the repository on GitHub to obtain more information.</p> <p>If you face any issue with MultiCrafter, please contact us on Issue Report page.</p> <p>Join our Discord server to send us feedback or get help immediately.</p> <p>Welcome to contribute MultiCrafter!</p>"},{"location":"migration/","title":"Migration Guide","text":"<p>This is a guide to help users migrate from the <code>v1.y.z</code> to <code>v2.y.z</code>.</p> Info <p>The <code>v2.y.z</code> is not yet officially out and is still in the devlopment phase!</p>"},{"location":"migration/#nullary-constructor-java","title":"Nullary Constructor (Java)","text":"<p>The class <code>Recipe</code> and <code>IOEntry</code> now use nullary constructor.</p> Example: Before <pre><code>new Recipe(\n    new IOEntry(\n        Seq.with(\n            ItemStack.with(Items.copper, 1)\n        )\n    ),\n    new IOEntry(\n        Seq.with(),\n        Seq.with(\n            LiquidStack.with(Liquids.water, 1f)\n        )\n    ),\n    120f\n)\n</code></pre> Example: After <pre><code>new Recipe() {{\n    input = new IOEntry() {{\n        items = Seq.with(\n            ItemStack.with(Items.copper, 1)\n        );\n    }};\n    output = new IOEntry() {{\n        liquids = Seq.with(\n            LiquidStack.with(Liquids.water, 1f)\n        );\n    }};\n    craftTime = 120f;\n}}\n</code></pre>"},{"location":"migration/#using-stack-java","title":"Using <code>Stack[]</code> (Java)","text":"<p>Instead of using <code>Seq&lt;Stack[]&gt;</code> we now simply use <code>Stack[]</code>. It only impacts the variables in the <code>IOEntry</code> class (<code>items</code>, <code>fluids</code> and <code>payloads</code>).</p> Example: Before <pre><code>input = new IOEntry() {{\n    items = Seq.with(\n        ItemStack.with(Items.copper, 1)\n    );\n}};\noutput = new IOEntry() {{\n    liquids = Seq.with(\n        LiquidStack.with(Liquids.water, 1f)\n    );\n}};\n</code></pre> Example: After <pre><code>input = new IOEntry() {{\n    items = ItemStack.with(Items.copper, 1);\n}};\noutput = new IOEntry() {{\n    liquids = LiquidStack.with(Liquids.water, 1f);\n}};\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"api/drawer/","title":"Drawer","text":"Drawer Replacement DrawHeatRegion multicraft.DrawHeatRegion DrawLiquidOutputs No replacement"},{"location":"api/multicrafter/","title":"MultiCrafter","text":"<p>The <code>MultiCrafter</code> works like a normal <code>GenericCrafter</code>, so <code>MultiCrafter</code> has most of <code>GenericCrafter</code>'s API.</p> Field Type Default Note itemCapacityMultiplier float 1f fluidCapacityMultiplier float 1f powerCapacityMultiplier float 1f \ufe0f recipes Object null \ufe0f menu String transform \ufe0f craftEffect Effect none \ufe0f updateEffect Effect none \ufe0f changeRecipeEffect Effect upgradeCore when recipe is changed.                                                       \ufe0f fluidOutputDirections int[] {-1} substitute for vanilla <code>liquidOutputDirections</code>                                                               \ufe0f updateEffectChance float 0.04f \ufe0f warmupSpeed float 0.019f \ufe0f powerCapacity float 0f \ufe0f dumpExtraFluid boolean true \ufe0f heatColor Color new Color(1f, 0.22f, 0.22f, 0.8f) What color of heat for recipe selector.                                                       \ufe0f drawer DrawBlock new DrawDefault() \ufe0f"},{"location":"customize/builtin/","title":"Built-in menu styles","text":""},{"location":"customize/builtin/#transform","title":"Transform","text":""},{"location":"customize/builtin/#simple","title":"Simple","text":""},{"location":"customize/builtin/#number","title":"Number","text":""},{"location":"customize/builtin/#detailed","title":"Detailed","text":""},{"location":"customize/drawer/","title":"DrawRecipe","text":"<p><code>DrawRecipe</code> drawer let you draw different images for each recipe.</p> <p>Type: multicraft.DrawRecipe</p> <p>It looks like a <code>DrawMulti</code>, but the drawer will be changed once another recipe is selected.</p> Field Type Default Note drawers DrawBlock[] {} ordered drawers for each recipe defaultDrawer int 0 the default drawer index in <code>drawers</code> for icon generation <p>Suppose you have those sprites with a MultiCrafter, named <code>mine-crafter</code>.</p> <pre><code>sprites/\n\u251c\u2500 blocks/\n\u2502  \u251c\u2500 mine-crafter-1.png\n\u2502  \u251c\u2500 mine-crafter-2.png\n\u2502  \u251c\u2500 mine-crafter-3.png\n</code></pre> Sprite File Name mine-crafter-1.png mine-crafter-2.png mine-crafter-3.png <p></p> HJSONJSON <pre><code>drawer: {\n  type: multicraft.DrawRecipe\n  defaultDrawer: 0 // an index used for generating the icon of this crafter. \n  drawers: [\n    // for recipe 0\n    { \n    type: DrawMulti\n    drawers: [\n      {\n          type: DrawRegion\n          suffix: -1\n      }\n      {\n          type: DrawArcSmelt\n      }\n    ]\n    }\n    // for recipe 1\n    { \n      type: DrawRegion\n      suffix: -2\n    }\n    // for recipe 2\n    { \n      type: DrawRegion\n      suffix: -3\n    }\n  ]\n}\n</code></pre> <pre><code>\"drawer\": {\n  \"type\": \"multicraft.DrawRecipe\",\n  \"drawers\": [\n    {\n    \"type\": \"DrawMulti\",\n    \"drawers\": [\n      {\n          \"type\": \"DrawRegion\",\n          \"suffix\": \"-1\"\n      },\n      {\n          \"type\": \"DrawArcSmelt\"\n      },\n    ]\n    },\n    {\n      \"type\": \"DrawRegion\",\n      \"suffix\":\"-2\"\n    },\n    {\n      \"type\": \"DrawRegion\",\n      \"suffix\": \"-3\"\n    }\n  ]\n}\n</code></pre>"},{"location":"customize/menu/","title":"Menu Style","text":"<p>You can select which menu style detailed-described blow you want with a case-insensitive name. The default menu style is <code>Transform</code>.</p> HJSONJSONJavaScript <p>Suppose you have such structure with a MultiCrafter, named <code>mine-crafter</code> <pre><code>content/\n\u251c\u2500 blocks/\n\u2502  \u251c\u2500 mine-crafter.hjson\n</code></pre> You can configure its menu style. <pre><code>menu: Transform\n</code></pre></p> <p>Suppose you have such structure with a MultiCrafter, named <code>mine-crafter</code> <pre><code>content/\n\u251c\u2500 blocks/\n\u2502  \u251c\u2500 mine-crafter.json\n</code></pre> You can configure its menu style. <pre><code>\"menu\": \"Transform\"\n</code></pre></p> <p>Suppose you have a MultiCrafter, named <code>mine-crafter</code> <pre><code>const multi = require(\"multi-crafter/lib\")\nconst mineCrafter = multi.MultiCrafter(\"mine-crafter\")\n</code></pre> You can configure its menu style. <pre><code>mineCrafter.menu= \"Transform\"\n</code></pre></p>"},{"location":"usage/java/","title":"Java","text":"<p>In your Java file containing all your blocks (create one if you don't already have one) imports the MultiCrater library.</p> <pre><code>import multicraft.*\n</code></pre> <p>Then create a new block with the type <code>MultiCrafter</code></p> <pre><code>Block mine-crafter = new MultiCrafter(\"mine-crafter\") {{\n\n}};\n</code></pre> <p>You can add recipes like this:</p> <pre><code>resolvedRecipes = Seq.with(\n    new Recipe() {{\n        input = new IOEntry() {{\n            items = ItemStack.with(\n                Items.copper, 1,\n                Items.lead, 1\n            );\n        }};\n        output = new IOEntry() {{\n            items = ItemStack.with(\n                Items.surgeAlloy, 1,\n                Items.thorium, 1\n            );\n        }};\n        craftTime = 120f;\n    }},\n    new Recipe() {{\n        input = new IOEntry() {{\n            items = ItemStack.with(\n                Items.copper, 1\n            );\n        }};\n        output = new IOEntry() {{\n            items = ItemStack.with(\n                Items.copper, 1,\n                Items.beryllium, 1\n            );\n        }};\n        craftTime = 160f;\n    }}\n);\n</code></pre>"},{"location":"usage/java/#recipe","title":"Recipe","text":"<p>A recipe has several fields:</p> Field Type Note input IOEntry output IOEntry crafterTime Float how long to do a synthesis, can be 0. icon Prov&lt;TextureRegion&gt; such as <code>Icon.lock-open</code>. See Icon iconColor Color (RGB, RGBA, rgba8888 or Hex) a color for icon"},{"location":"usage/java/#input-and-output","title":"Input and Output","text":"<p>The <code>input</code> or <code>output</code> are <code>IOEntry</code>. With this style, its power is unlimited.</p> Key Type Note items ItemStack[] how much item for input/output, default: empty fluids LiquidStack[] how much fluid for input/output, default: empty power Float |  unit: power/tick how much power for input/output, default: 0f heat Float how much heat for input/output, default: 0f icon Icon such as <code>Icon.lock-open</code>. See Icon iconColor Color (RGB, RGBA, rgba8888 or Hex) a color for icon craftEffect Effect an independent craft effect for each recipe"},{"location":"usage/java/#icon","title":"Icon","text":"<p>You can customize which icon is used for your recipe selector menu.</p> <p>If you don't set a dedicated icon, it will find the first one from the recipe.</p> <p>For example:</p> alphaaaamono <p></p> <p>  icon = Icon.alphaaaa  iconColor: F30000  <pre><code>switchStyle = RecipeSwitchStyle.simple;\nresolvedRecipes = Seq.with(\n    new Recipe() {{\n        input = new IOEntry(){{\n            fluids = Seq.with(\n                Liquids.ozone, 1.5f\n            );\n        }};\n        output = new IOEntry() {{\n            items = Seq.with(\n                Items.coal, 1\n            )\n            power = 2f;\n            icon: alphaaaa\n            iconColor = Color.valueOf(\"#F30000\");\n        }};\n        craftTime = 250f;\n    }},\n    new Recipe() {{\n        input = new IOEntry(){{\n            items = Seq.with(\n                Items.copper, 1\n            );\n        }};\n        output = new IOEntry() {{\n            items = Seq.with(\n                Items.coal, 1\n            )\n            icon = () -&gt; Icon.lock.uiIcon;\n        }};\n        craftTime = 120f;\n    }}\n);\n</code></pre> </p> <p></p> <p>  icon: mono  <pre><code>switchStyle = RecipeSwitchStyle.simple;\nresolvedRecipes = Seq.with(\n    new Recipe() {{\n        input = new IOEntry(){{\n            items = Seq.with(\n                Items.copper, 1\n            );\n        }};\n        output = new IOEntry() {{\n            items = Seq.with(\n                Items.coal, 1\n            )\n        }};\n        craftTime = 60f;\n        icon = () -&gt; UnitTypes.mono.uiIcon;\n    }},\n    new Recipe() {{\n        input = new IOEntry(){{\n            items = Seq.with(\n                Items.copper, 1\n            );\n        }};\n        output = new IOEntry() {{\n            fluids = Seq.with(\n                Liquid.ozone, 1f\n            )\n        }};\n        craftTime = 60f;\n    }}\n);\n</code></pre> </p> <ul> <li>The <code>icon</code> variable as to be always defined by <code>icon = () -&gt; ...;</code></li> <li>For a built-in icon, it should start with <code>Icon.</code>, such as <code>Icon.lock-open</code> or <code>Icon.trash</code>.</li> <li>For an icon from item, fluid, unit or block, it should be the content <code>uiIcon</code>, such as <code>Units.mono.uiIcon</code>,<code>phase-heat.uiIcon</code>.</li> <li>For any texture, it should be its name, such as <code>your-mod-icon</code> or <code>alphaaaa</code>.</li> </ul>"},{"location":"usage/json/","title":"JSON &amp; Javascript","text":"HJSONJSONJavaScript <p>Create a file, for example, a <code>mine-crafter.hjson</code>, in the <code>content/blocks</code> folder. <pre><code>content/\n\u251c\u2500 blocks/\n\u2502  \u251c\u2500 mine-crafter.hjson\n</code></pre> Then set its type to <code>multicraft.MultiCrafter</code>. <pre><code>type: multicraft.MultiCrafter\n</code></pre></p> <p>You can add recipes like this:</p> <pre><code>recipes: \n[\n{\n  input: ozone/1.5\n  output: {\n    items: [\n      copper/1\n      graphite/2\n    ]\n    power: 2.5\n  }\n  craftTime: 250.0\n}\n{\n  input: {\n    items: [\n      cyber-io-ic/1 // You can add moded items or fluids\n      lead          // the same as \"lead/1\"\n    ]\n  }\n  output: {\n    fluids: [\n      cyber-io-cyberion/1.2    \n    ]\n  }\n  craftTime: 210.0\n}\n]\n</code></pre> <p>Create a file, for example, a <code>mine-crafter.json</code>, in the <code>content/blocks</code> folder. <pre><code>content/\n\u251c\u2500 blocks/\n\u2502  \u251c\u2500 mine-crafter.json\n</code></pre> Then set its type to <code>multicraft.MultiCrafter</code>. <pre><code>\"type\": \"multicraft.MultiCrafter\"\n</code></pre></p> <p>You can add recipes like this:</p> <pre><code>\"recipes\": [\n  {\n    \"input\": \"ozone/1.5\",\n    \"output\": {\n      \"items\": [\n        \"copper/1\",\n        \"graphite/2\"\n      ],\n      \"power\": 2.5\n    },\n    \"craftTime\": 250.0\n  },\n  {\n    \"input\": {\n      \"items\": [\n        \"cyber-io-ic/1\",\n        \"lead\"\n      ]\n    },\n    \"output\": {\n      \"fluids\": [\n        \"cyber-io-cyberion/1.2\"\n      ]\n    },\n    \"craftTime\": 210.0\n  }\n]\n</code></pre> <p>In a JavaScript file, you should import the <code>MultiCrafter</code> class from <code>multi-cafter</code> <pre><code>const multi = require(\"multi-crafter/lib\")\nconst mineCrafter = multi.MultiCrafter(\"mine-crafter\")\n</code></pre> You can add recipes like this: <pre><code>mineCrafter.recipes= [\n{ \n  input: \"ozone/1.5\",\n  output: {\n    items: [\"copper/1\",\"graphite/2\"]\n    power: 2.5\n  },\n  craftTime: 250.0\n},{\n  input: {\n    items: [\"cyber-io-ic/1\", \"lead\"]\n  },\n  output: {\n    fluids: [\"cyber-io-cyberion/1.2\"]\n  },\n  craftTime: 210.0\n}]\n</code></pre></p>"},{"location":"usage/json/#recipe","title":"Recipe","text":"<p>A recipe has several fields:</p> Field Type Note input Object, String or List alias: [<code>in</code>,<code>i</code>] output Object, String or List alias: [<code>out</code>,<code>o</code>] crafterTime Number |  unit: tick how long to do a synthesis, can be 0. icon String such as <code>Icon.lock-open</code>. See Icon iconColor String a hex color for icon"},{"location":"usage/json/#input-and-output","title":"Input and Output","text":""},{"location":"usage/json/#string","title":"String","text":"<p>The <code>input</code> or <code>output</code> can be a <code>String</code>. If so, it will be considered as an item or fluid.</p> <p>If there is no amount given, <code>1</code> will be the amount as default.</p> HJSONJSONJavaScript <pre><code>input: copper/2\noutput: water/1.2\n</code></pre> <pre><code>\"input\": \"copper/2\",\n\"output\": \"water/1.2\"\n</code></pre> <pre><code>input: \"copper/2\",\noutput: \"water/1.2\"\n</code></pre>"},{"location":"usage/json/#list","title":"List","text":"<p>The <code>input</code> or <code>output</code> can be a <code>List</code>. If so, every element will be treated as an item or fluid.</p> HJSONJSONJavaScript <pre><code>input: [copper/2,lead/3]\noutput: slag/2.5\n</code></pre> <pre><code>\"input\": [\"copper/2\",\"lead/3\"],\n\"output\": \"slag/2.5\"\n</code></pre> <pre><code>input: [\"copper/2\",\"lead/3\"],\noutput: \"slag/2.5\"\n</code></pre>"},{"location":"usage/json/#object","title":"Object","text":"<p>The <code>input</code> or <code>output</code> can be an <code>Object</code>. With this style, its power is unlimited.</p> Key Type Note items String or List how much item for input/output, default: empty fluids String or List how much fluid for input/output, default: empty power Number |  unit: power/tick how much power for input/output, default: 0 heat Number how much heat for input/output, default: 0 icon String such as <code>Icon.lock-open</code>. See Icon iconColor String a hex color for icon craftEffect String an independent craft effect for each recipe HJSONJSONJavaScript <pre><code>input: {\n  items: copper/10\n  heat: 5\n}\noutput: {\n  items: moded-item/1\n  fluids: [\n    water/1.5, ozone/3\n  ]\n  power: 1.5\n}\n</code></pre> <pre><code>\"input\": {\n  \"items\": \"copper/10\",\n  \"heat\": 5\n}\n\"output\": {\n  \"items\": \"moded-item/1\",\n  \"fluids\": [\n    \"water/1.5\", \"ozone/3\"\n  ],\n  \"power\": 1.5\n}\n</code></pre> <pre><code>input: {\n  items: \"copper/10\",\n  heat: 5\n},\noutput: {\n  items: \"moded-item/1\",\n  fluids: [\n    \"water/1.5\", \"ozone/3\"\n  ],\n  power: 1.5\n}\n</code></pre>"},{"location":"usage/json/#icon","title":"Icon","text":"<p>You can customize which icon is used for your recipe selector menu.</p> <p>If you don't set a dedicated icon, it will find the first one from the recipe.</p> <p>For example:</p> alphaaaamono <p></p> <p>  icon: alphaaaa  iconColor: F30000  <pre><code>recipes: [\n{\n  input: ozone/1.5\n  output:{\n    items : copper\n    power : 2\n    icon: alphaaaa\n    iconColor: \"F30000\"\n  }\n  craftTime : 250.0\n}\n{\n  input: copper\n  output:{\n    items : coal\n    icon: lock-open\n  }\n  craftTime : 120\n}\n]\n</code></pre> </p> <p></p> <p>  icon = mono  <pre><code>menu: Simple\nrecipes:\n[\n{\n  input: copper\n  output: coal\n  craftTime : 60\n  icon: mono\n}\n{\n  input: copper\n  output: ozone\n  craftTime : 60\n}\n]\n</code></pre> </p> <p>You can set it to a <code>String</code>, it will find the proper icon automatically.</p> <ul> <li>For a built-in icon, it should start with <code>Icon.</code>, such as <code>Icon.lock-open</code> or <code>Icon.trash</code>.</li> <li>For an icon from item, fluid, unit or block, it should be its name, such as <code>mono</code>,<code>phase-heat</code>.</li> <li>For any texture, it should be its name, such as <code>your-mod-icon</code> or <code>alphaaaa</code>.</li> </ul>"}]}